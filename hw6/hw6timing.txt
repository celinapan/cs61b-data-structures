1a. Results for InsertRandomSpeedTest for N = 1000000:
        Inserting 1000000 random length 10 Strings into a StringSet of type BSTStringSet
        Took: 1.45 sec.

        Inserting 1000000 random length 10 Strings into a StringSet of type ECHashStringSet
        Took: 0.78 sec.

        Inserting 1000000 random length 10 Strings into a StringSet of type java.util.TreeSet
        Took: 1.51 sec.

        Inserting 1000000 random length 10 Strings into a StringSet of type java.util.HashSet
        Took: 0.77 sec.

1b. Results for InsertRandomSpeedTest for N = 2000000:
        Inserting 2000000 random length 10 Strings into a StringSet of type BSTStringSet
        Took: 3.77 sec.

        Inserting 2000000 random length 10 Strings into a StringSet of type ECHashStringSet
        Took: 1.70 sec.

        Inserting 2000000 random length 10 Strings into a StringSet of type java.util.TreeSet
        Took: 3.61 sec.

        Inserting 2000000 random length 10 Strings into a StringSet of type java.util.HashSet
        Took: 1.57 sec.

1c. Does your ECHashStringSet look roughly linear or roughly quadratic
in its scaling behavior for random strings?

        Yes, it looks linear because an increase of 1000000 in size corresponds to about 1.0 second in runtime.

2a. Results for InsertInOrderSpeedTest for N = 10000:
        Inserting 10000 in-order strings into a StringSet of type BSTStringSet
        Took: 0.72 sec.

        Inserting 10000 in-order strings into a StringSet of type ECHashStringSet
        Took: 0.01 sec.

        Inserting 10000 in-order strings Strings into a StringSet of type java.util.TreeSet
        Took: 0.02 sec.

        Inserting 10000 in-order strings Strings into a StringSet of type java.util.HashSet
        Took: 0.01 sec.

2b. Results for InsertInOrderSpeedTest for N = 20000:
        Inserting 20000 in-order strings into a StringSet of type BSTStringSet
        Took: 1.57 sec.

        Inserting 20000 in-order strings into a StringSet of type ECHashStringSet
        Took: 0.04 sec.

        Inserting 20000 in-order strings Strings into a StringSet of type java.util.TreeSet
        Took: 0.06 sec.

        Inserting 20000 in-order strings Strings into a StringSet of type java.util.HashSet
        Took: 0.04 sec.

2c. Does your **BST**StringSet look roughly linear or roughly
quadratic in its scaling behavior for in order strings?
    I think it looks fairly linear: going from 0.75 to 1.57 about about double the amount of time. Which is a scalar
    multiple of a linear function.

Before submitting, make sure that your ECHashStringSet is capable of
handling inputs of size 1000000 in a reasonable amount of time (a few
seconds).

